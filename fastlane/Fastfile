fastlane_version "1.50.0"

default_platform :mac

platform :mac do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    
    # carthage
    # increment_build_number

    # xctool # run the tests of your app
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    increment_build_number
    gym(:scheme => "Editor")

    app_path = ENV[SharedValues::IPA_OUTPUT_PATH.to_s]
    dir = File.dirname(ENV[SharedValues::IPA_OUTPUT_PATH.to_s])
    app_filename = File.basename(app_path)
    zip_path = dir + "/" + File.basename(app_path, ".app") + ".zip"
    Actions.sh("pushd #{dir} && zip -r #{zip_path} #{app_filename}/* && popd")

    puts "Zipped path: #{zip_path}"
    # hockey(:api_token => "5fcef81dbdfd44f7a9fde49c16f5fe3a", :ipa => zip_path)
    Actions.sh("/Users/Romain/Sandbox/Sparkle/bin/sign_update #{zip_path} /Users/Romain/Dropbox/Projects\\ -\\ Perfectly-cooked/Editor/dsa_priv.pem")



    # require 'json'
    # require 'time'

    # Aws.config.update({region: 'us-east-1', credentials: Aws::SharedCredentials.new(profile_name: 'Editor') })


    # s3 = Aws::S3::Resource.new(region:'us-east-1')
    # archive_object = s3.bucket('pcs-editor').object('Editor.app.zip')
    # archive_object.upload_file(zip_filename, acl: 'public-read', content_type: 'application/zip')

    # update_hash = { 
    #   :url => archive_object.public_url.to_s,
    #   :name => "Editor release",
    #   :notes => "Notes",
    #   :pub_date => Time.now.utc.iso8601
    # }

    # update_payload_object = s3.bucket('pcs-editor').object('latest')
    # update_payload_object.put({ 
    #   body: JSON.generate(update_hash), 
    #   acl: 'public-read',
    #   content_type: 'application/json'
    # })
    # puts update_payload_object.public_url
  end


  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end



# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
